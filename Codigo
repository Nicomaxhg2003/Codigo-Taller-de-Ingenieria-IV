'''
Entrega final de taller de ingenieria IV, esta es una aplicación para aumentar cualquier tipo de formato de video (mp4, wav, avi, gif, etc)
utilizando sistema de marcadores ARUCO utilizando la libreria OpenCV, para comenzar a utilizar la apliación debemos intalar la libreria
desde la pagina oficial.

Integrantes: Nicolás Henriquez y Carlos Subiabre, 2do año de Ingenieria Civil Informatica.
'''

import cv2 as cv
from cv2 import aruco
import numpy as np

id_marker = 1 # Definimos el marcador en el cual haremos la aumentación

# Funcion para aumentar la imagén
def augmentation(bbox, img, img_augment):
    top_left = bbox[0][0][0], bbox[0][0][1]
    top_right = bbox[0][1][0], bbox[0][1][1]
    bottom_right = bbox[0][2][0], bbox[0][2][1]
    bottom_left = bbox[0][3][0], bbox[0][3][1]
# Obtenemos las esquinas de los marcadores Aruco y las designamos
    height, width, _, = img_augment.shape

    points_1 = np.array([top_left, top_right, bottom_right, bottom_left])
    points_2 = np.float32([[0, 0], [width, 0], [width, height], [0, height]])
# Apuntamos a las esquinas dejandolas ordanas de forma matricial
    matrix, _ = cv.findHomography(points_2, points_1)
    image_out = cv.warpPerspective(img_augment, matrix, (img.shape[1], img.shape[0]))
    cv.fillConvexPoly(img, points_1.astype(int), (0, 0, 0))
    image_out = img + image_out
    return image_out
# Retornamos la Imagen de salida (camara)
aruco_dict = aruco.Dictionary_get(aruco.DICT_4X4_50)
parameters = aruco.DetectorParameters_create()
# Definimos los marcadores y el como los usaremos
video = cv.VideoCapture(r"C:\Users\nicom\Desktop\AUMENTACIONFINAL\VIDEO\video.mp4") # Aquí leemos el archivo, debemos obtener la ruta en la que se encuentra

deteccion = True # Deteccion de los marcadores
frame_count = 0 # Cantidad de Frames Per Second que leemos, los cuales aumentaremos luego

height_marker, width_marker = 1000, 1000 # Ajustando la resolución de salida, mientras mayor, mejor se verá la imagen
ret, image_video = video.read() # Leemos el archivo de video y lo ajustamos a 2 variables
image_video = cv.resize(image_video, (width_marker, height_marker)) # Reajustamos el video para que coincida con el ajuste previo


cap = cv.VideoCapture(0) # Comenzamos a operar con la camara

# Loop para comenzar a leer el video, procesandolo encima del marcador
while (cap.isOpened()):
    ret, frame = cap.read()
    if deteccion == False:
        video.set(cv.CAP_PROP_POS_FRAMES, 0)
        frame_count = 0
    # Detectamos si el archivo corresponde a la ruta, si no existe solo mostraremos una imagen en blanco
    # Ya que no aun no tenemos frames para leer
    else:
        if frame_count == video.get(cv.CAP_PROP_FRAME_COUNT):
            video.set(cv.CAP_PROP_POS_FRAMES, 0)
            frame_count = 0
        ret, image_video = video.read()
        image_video = cv.resize(image_video, (width_marker, height_marker))
    # Si se encontró el archivo, aumentaremos la cantidad de frames que encontremos y comenzaremos a ajustar el video
    # Para ajustardo de acuerdo a los previo ya personalizado
    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

    corners, ids, rejected = aruco.detectMarkers(image = gray, dictionary = aruco_dict, parameters = parameters)
    # Aqui comenzamos a buscar los marcadores y los volvemos a detectar
    if ids is not None and ids[0] == id_marker:
        detection = True
        frame = augmentation(np.array(corners)[0], frame, image_video)
    # Si la detección y todos los ajusten funcionaron, solo debemos superponer el video ajustado
    # Encima de los marcadores
    cv.imshow('input', frame)
    if cv.waitKey(1) & 0xFF == 27:
        break
    frame_count += 1
    # Termianmos el loop
cv.destroyAllWindows()
